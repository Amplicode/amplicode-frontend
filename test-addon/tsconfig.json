{
  "compilerOptions": {
    "rootDir": "src",
    "outDir": "dist",
    "declaration": true, // Emit '.d.ts'
    "declarationDir": "dist",
    "module": "ES2020", // Support dynamic imports and import.meta
    "target": "ES2015", // works in every modern browser
    "lib": [ // Exclude ScriptHost
      "DOM",
      "DOM.Iterable",
      "ES2015"
    ],
    "sourceMap": true, // Generate sourcemap files
    "inlineSources": true, // Include original TS sources to source maps
    "jsx": "react-jsx", // React 17 style of JSX transformation
    "moduleResolution": "node", // Most commonly used, required for "resolveJsonModule"
    "resolveJsonModule": true, // Allows importing JSON files
    "esModuleInterop": true, // Allows importing CommonJS libs using ES2015 syntax
    // "esModuleInterop": true -> "allowSyntheticDefaultImports" defaults to "true"
    // It allows writing `import React from 'react';` instead of `import * as React from 'react';`
    "strict": true, // Enables stricter type checking
    "noUnusedLocals": true, // Error on unused local variables
    "noUnusedParameters": true, // Error on unused function parameters
    "noImplicitReturns": true, // Must always return value explicitly
    "noImplicitAny": true, // Error when inferred type is `any`
    "experimentalDecorators": true, // Because we are using MobX decorators
    "isolatedModules": true, // TS will warn if code cannot be transpiled by single-file transpilers such as Babel
    "forceConsistentCasingInFileNames": true, // Can't import from './SomeFile.ts' if the file name is './someFile.ts'
    "noEmit": true, // Do not transform TypeScript using TypeScript compiler as we use rollup.
  },
  "plugins": [{ "name": "typescript-plugin-css-modules" }],
  "include": ["src/**/*"]
}
