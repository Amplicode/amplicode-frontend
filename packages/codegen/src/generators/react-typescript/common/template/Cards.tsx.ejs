<% var withDeleteAction = locals.deleteMutationString != null && locals.deleteMutationName != null; -%>
<% const QUERY_CONST = toFatSnakeCase(queryName); -%>
<% const MUTATION_CONST = deleteMutationName ? toFatSnakeCase(deleteMutationName) : undefined; -%>
<%# ------- TEMPLATE STARTS HERE ------- -%>
import {
  ReactNode,
  <% if (withFilters) { -%>
    useState,
  <% } -%>
} from "react";
import {
  useQuery,
  <% if (withDeleteAction) { -%>
    useMutation,
  <% } -%>
} from "@apollo/client";
import {ApolloError} from "@apollo/client/errors";
import {
  ResultOf,
  <% if (withFilters) { -%>
    VariablesOf,
  <% } -%>
} from "@graphql-typed-document-node/core";
import {
  <% if (withFilters || mode === 'edit') { -%>
    Button,
  <% } -%>
  <% if (withDeleteAction) {-%>
    Modal, message,
  <% } -%>
  <% if (withFilters) { -%>
    Row,
    Col,
    Form,
    <% if (filterImports.withFilterNumber) { -%>
      InputNumber,
    <% } -%>
    <% if (filterImports.withFilterString) { -%>
      Input,
    <% } -%>
    <% if (filterImports.withFilterCheckbox) { -%>
      Checkbox,
    <% } -%>
  <% } -%> 
  Card,
  Empty,
  Space,
  Spin,
} from "antd";
<% if (withFilters) { -%>
  import { useForm } from "antd/lib/form/Form";
<% } -%>
<% if (withFilters && filterImports.withFilterDate) { -%>
  import { DatePicker } from "@amplicode/react";
<% } -%>
<% if (withFilters || withDeleteAction || mode === 'edit' || mode === 'view with details') { -%>
  import {
    <% if (withDeleteAction) { -%>
      DeleteOutlined,
      LoadingOutlined,
    <% } -%>
    <% if (mode === 'edit') { -%>
      EditOutlined,
      PlusOutlined,
    <% } -%>
    <% if (mode === 'view with details') { -%>
      EnterOutlined,
    <% } -%>
    <% if (filterImports.withFilterNumber || filterImports.withFilterString) { -%>
      CloseCircleOutlined,
    <% } -%>
  } from "@ant-design/icons";
<% } -%>
<% if (mode === 'edit' || mode === 'view with details') { -%>
  import { useNavigate } from "react-router-dom";
<% } -%>
import {
  <% if (withFilters || mode === 'edit') { -%>
    FormattedMessage,
  <% } -%>
  useIntl
} from "react-intl";
import {gql} from "@amplicode/gql";
import {ValueWithLabel} from "<%= relDirShift %>core/crud/ValueWithLabel";
<% if (withDeleteAction) { -%>
  import {useDeleteItem} from "<%= relDirShift %>core/crud/useDeleteItem";
  import {GraphQLError} from "graphql/error/GraphQLError";
  import {FetchResult} from "@apollo/client/link/core";
<% } -%>
import {RequestFailedError} from "<%= relDirShift %>core/crud/RequestFailedError";
import {deserialize} from "<%= relDirShift %>core/transform/model/deserialize";
import { get<%= capitalizeFirst(entityName) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(entityName) %>DisplayName';
<% attributes.filter(a => a.isRelationField).forEach(attribute => { -%>
  import { get<%= capitalizeFirst(attribute.type) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(attribute.type) %>DisplayName';
<% }) -%>
import {useBreadcrumbItem} from "<%= relDirShift %>core/screen/useBreadcrumbItem";

<% if (withDeleteAction || mode === 'edit') { -%>
  const REFETCH_QUERIES = ['<%= refetchQuery %>'];
<% } -%>

const <%= QUERY_CONST %> = gql(`
  <%= queryString %>
`);

<% if (withDeleteAction) { -%>
const <%= MUTATION_CONST %> = gql(`
  <%= deleteMutationString %>
`);
<% } -%>

<% if (withFilters) { -%>
  const initialFilterVars: QueryVariablesType = {};
<% } -%>

export function <%= componentName %>() {
  const intl = useIntl();
  useBreadcrumbItem(intl.formatMessage({id: 'screen.<%= componentName %>'}));

  <% if (withFilters) { -%>
    const [filterVars, setFilterVars] = useState<QueryVariablesType>(initialFilterVars);

    // Load the items from server. Will be reloaded reactively if one of variable changes
    const { loading, error, data } = useQuery(<%= QUERY_CONST %>, { variables: filterVars });
    const items = deserialize(data?.<%= queryName %>);
  <% } else { -%>
    // Load the items from server
    const { loading, error, data } = useQuery(<%= QUERY_CONST %>);
    const items = deserialize(data?.<%= queryName %>);
  <% } -%>

  return (
    <div className="narrow-layout">
      <Space direction="vertical" className="card-space">
        <% if (mode === 'edit') { -%>
          <ButtonPanel />
        <% } -%>
        <% if (withFilters) { -%>
          <Card>
            <Filters onApplyFilters={setFilterVars} />
          </Card>
        <% } -%>
        <Cards
          items={items}
          loading={loading}
          error={error}
        />
        {/* <Pagination /> - in future */}
      </Space>
    </div>
  );
}

<% if (mode === 'edit') { -%>
  /**
   * Button panel above the cards
   */
  function ButtonPanel() {
    const intl = useIntl();
    const navigate = useNavigate();

    return (
      <div>
        <Button
          htmlType="button"
          key="create"
          title={intl.formatMessage({id: "common.create"})}
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => navigate("new")}
        >
        <span>
          <FormattedMessage id="common.create" />
        </span>
        </Button>
      </div>
    );
  }
<% } -%>

<% if (withFilters) { -%>
  <%- include('Filters', filters) %>
<% } -%>

interface ItemCardsListProps {
  items?: ItemListType;
  loading?: boolean;
  error?: ApolloError;
}

/**
 * Collection of cards, each card representing an item
 */
function Cards({items, loading, error}: ItemCardsListProps) {
  if (loading) {
    return <Spin />;
  }

  if (error) {
    return (
      <RequestFailedError />
    );
  }

  if (items == null || items.length === 0) {
    return <Empty />;
  }

  return (
    <Space direction="vertical" className="card-space">
      {items.map(item => (
        <ItemCard item={item} key={item?.<%= idField %>} />
      ))}
    </Space>
  );
}

function ItemCard({item}: {item: ItemType}) {
  // Get the action buttons that will be displayed in the card
  const cardActions: ReactNode[] = useCardActions(item);

  if (item == null) {
    return null;
  }

  return (
    <Card key={item.<%= idField %>}
          title={get<%= capitalizeFirst(entityName) %>DisplayName(item)}
          actions={cardActions}
          className="narrow-layout"
    >
      <% attributes.forEach(attr => { -%>
        <ValueWithLabel key='<%= attr.name %>'
                        label='<%= attr.displayName %>'
                        <% if (attr.isRelationField) { -%>
                          value={get<%= capitalizeFirst(attr.type) %>DisplayName(item.<%= attr.name %> ?? undefined)}
                        <% } else if (attr.type === 'Date') { -%>
                          value={item.<%= attr.name %>?.format("LL") ?? undefined}
                        <% } else if (attr.type === 'LocalDateTime' || attr.type === 'DateTime' || attr.type === 'Timestamp') { -%>
                          value={item.<%= attr.name %>?.format("LLL") ?? undefined}
                        <% } else if (attr.type === 'LocalTime' || attr.type === 'Time') { -%>
                          value={item.<%= attr.name %>?.format("LTS") ?? undefined}
                        <% } else if (attr.type === 'Url') { -%>
                          value={item.<%= attr.name %> ?? undefined} isUrl={true}
                        <% } else { -%>
                          value={item.<%= attr.name %> ?? undefined}
                        <% } -%>
        />
      <% }) -%>
    </Card>
  );
}

/**
 * Returns action buttons that will be displayed inside the card.
 */
function useCardActions(item: ItemType): ReactNode[] {
  const intl = useIntl();
  <% if (withDeleteAction) { -%>
    const { showDeleteConfirm, deleting } = useDeleteConfirm(item?.<%= idField %>);
  <% } -%>

  <% if (mode === 'edit' || mode === 'view with details') { -%>
    const navigate = useNavigate();
  <% } -%>

  return [
    <% if (mode === 'edit') { -%>
      <EditOutlined
        key="edit"
        title={intl.formatMessage({ id: "common.edit" })}
        onClick={() => {
          if (item?.<%= idField %> != null) {
            navigate(item.<%= idField %>);
          }
        }}
      />,
    <% } -%>
    <% if (mode === 'view with details') { -%>
      <EnterOutlined
        key="open"
        title={intl.formatMessage({ id: "common.open" })}
        onClick={() => {
          if (item?.<%= idField %> != null) {
            navigate(item.<%= idField %>);
          }
        }}
      />,
    <% } -%>
    <% if (withDeleteAction) { -%>
      deleting ? <LoadingOutlined /> :
        <DeleteOutlined
          key="delete"
          title={intl.formatMessage({ id: "common.remove" })}
          onClick={showDeleteConfirm}
        />
    <% } -%>
  ];
}

<% if (withDeleteAction) { -%>
  /**
   * Returns a confirmation dialog and invokes delete mutation upon confirmation
   * @param id id of the entity instance that should be deleted
   */
  function useDeleteConfirm(id: string | null | undefined) {
    const intl = useIntl();

    const [runDeleteMutation, { loading }] = useMutation(<%= MUTATION_CONST %>);
    const deleteItem = useDeleteItem(
      id,
      runDeleteMutation,
      REFETCH_QUERIES
    );

    // Callback that deletes the item
    function handleDeleteItem() {
      deleteItem()
        .then(({ errors }: FetchResult) => {
          if (errors == null || errors.length === 0) {
            return handleDeleteSuccess();
          }
          return handleDeleteGraphQLError(errors);
        })
        .catch(handleDeleteNetworkError);
    }

    // Function that is executed when mutation is successful
    function handleDeleteSuccess() {
      return message.success(intl.formatMessage({ id: "EntityDetailsScreen.deletedSuccessfully" }));
    }

    // Function that is executed when mutation results in a GraphQL error
    function handleDeleteGraphQLError(errors: ReadonlyArray<GraphQLError> | undefined) {
      console.error(errors);
      return message.error(intl.formatMessage({ id: "common.requestFailed" }));
    }

    // Function that is executed when mutation results in a network error (such as 4xx or 5xx)
    function handleDeleteNetworkError(error: Error | ApolloError) {
      console.error(error);
      return message.error(intl.formatMessage({ id: "common.requestFailed" }));
    }

    return {
      showDeleteConfirm: () =>
      Modal.confirm({
        content: intl.formatMessage({
          id: "EntityListScreen.deleteConfirmation"
        }),
        okText: intl.formatMessage({ id: "common.ok" }),
        cancelText: intl.formatMessage({ id: "common.cancel" }),
        onOk: handleDeleteItem
      }),
      deleting: loading
    }
  }
<% } -%>

/**
 * Type of data object received when executing the query
 */
type QueryResultType = ResultOf<typeof <%= QUERY_CONST %>>;
<% if (withFilters) { -%>
  /**
  * Type of variables used to filter the items list
  */
  type QueryVariablesType = VariablesOf<typeof <%= QUERY_CONST %>>;
<% } -%>
/**
 * Type of the items list
 */
type ItemListType = QueryResultType['<%= queryName %>'];
/**
 * Type of a single item
 */
type ItemType = Exclude<ItemListType, null | undefined>[0];
