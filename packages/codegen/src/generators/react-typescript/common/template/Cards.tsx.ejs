<% var withItemComponent = locals.itemComponentName != null; -%>
<% var withDeleteAction = locals.deleteMutationString != null && locals.deleteMutationName != null; -%>
<% const QUERY_CONST = toFatSnakeCase(queryName); -%>
<% const MUTATION_CONST = deleteMutationName ? toFatSnakeCase(deleteMutationName) : undefined; -%>
<%# ------- TEMPLATE STARTS HERE ------- -%>
import {
  ReactNode,
  <% if (mode === 'edit' || mode === 'view with details') { -%>
    useEffect,
  <% } -%>
} from "react";
import {
  useQuery,
  <% if (withDeleteAction) { -%>
    useMutation,
  <% } -%>
} from "@apollo/client";
import {ApolloError} from "@apollo/client/errors";
import {ResultOf} from "@graphql-typed-document-node/core";
import {
  <% if (withFilters || mode === 'edit') { -%>
    Button,
  <% } -%>
  <% if (withFilters) { -%>
    Row,
    Col,
    Form,
    <% if (filterImports.withFilterNumber) { -%>
      InputNumber,
    <% } -%>
    <% if (filterImports.withFilterString) { -%>
      Input,
    <% } -%>
    <% if (filterImports.withFilterCheckbox) { -%>
      Checkbox,
    <% } -%>
    <% if (filterImports.withFilterDate) { -%>
      DatePicker,
    <% } -%>
  <% } -%> 
  Card,
  Empty,
  Space,
  Spin,
} from "antd";
<% if (withFilters) { -%>
  import { useForm } from "antd/lib/form/Form";
<% } -%>
<% if (withDeleteAction || mode === 'edit' || mode === 'view with details') { -%>
  import {
    <% if (withDeleteAction) { -%>
      DeleteOutlined,
    <% } -%>
    <% if (mode === 'edit') { -%>
      EditOutlined,
      PlusOutlined,
    <% } -%>
    <% if (mode === 'view with details') { -%>
      EnterOutlined,
    <% } -%>
  } from "@ant-design/icons";
<% } -%>
<% if (mode === 'edit' || mode === 'view with details') { -%>
  import {useRouteMatch} from "react-router-dom";
<% } -%>
import {
  <% if (mode === 'edit') { -%>
    FormattedMessage,
  <% } -%>
  useIntl
} from "react-intl";
<% if (mode === 'edit' || mode === 'view with details') { -%>
  import {useScreens} from "@amplicode/react-core";
<% } -%>
import {gql} from "@amplicode/gql";
<% if (withItemComponent) { -%>
  import { <%= itemComponentName %> } from "./<%= itemComponentName %>";
  import {useOpenItemScreen} from "<%= relDirShift %>core/crud/useOpenItemScreen";
<% } -%>
import {ValueWithLabel} from "<%= relDirShift %>core/crud/ValueWithLabel";
<% if (withDeleteAction) { -%>
  import {useDeleteItem} from "<%= relDirShift %>core/crud/useDeleteItem";
<% } -%>
import {RequestFailedError} from "<%= relDirShift %>core/crud/RequestFailedError";
import {deserialize} from "../../../core/transform/model/deserialize";
import { get<%= capitalizeFirst(entityName) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(entityName) %>DisplayName';
<% attributes.filter(a => a.isRelationField).forEach(attribute => { -%>
  import { get<%= capitalizeFirst(attribute.type) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(attribute.type) %>DisplayName';
<% }) -%>

<% if (mode === 'edit' || mode === 'view with details') { -%>
  const ROUTE = '<%= route %>';
<% } -%>
<% if (withDeleteAction || mode === 'edit') { -%>
  const REFETCH_QUERIES = ['<%= refetchQuery %>'];
<% } -%>

const <%= QUERY_CONST %> = gql(`
  <%= queryString %>
`);

<% if (withDeleteAction) { -%>
const <%= MUTATION_CONST %> = gql(`
  <%= deleteMutationString %>
`);
<% } -%>

export function <%= componentName %>() {
  // Load the items from server
  const { loading, error, data } = useQuery(<%= QUERY_CONST %>);
  const items = deserialize(data?.<%= queryName %>);

  <% if (mode === 'edit' || mode === 'view with details') { -%>
    // If we have navigated here using a link, or a page has been refreshed,
    // we need to check whether the url contains the item id, and if yes - open item editor/details screen.
    useItemUrl();
  <% } -%>

  return (
    <div className="narrow-layout">
      <Space direction="vertical" className="card-space">
        <% if (mode === 'edit') { -%>
          <ButtonPanel />
        <% } -%>
        <% if (withFilters) { -%>
          <Card>
            <Filters
              // TODO define when we will know about graphQL filters API
              // eslint-disable-next-line no-console
              onApplyFilters={filters => console.log(filters)}
              onErrorFilters={error => console.error(error)}  
            />
          </Card>
        <% } -%>
        <Cards
          items={items}
          loading={loading}
          error={error}
        />
        {/* <Pagination /> - in future */}
      </Space>
    </div>
  );
}

<% if (mode === 'edit' || mode === 'view with details') { -%>
  /**
   * Checks whether the url contains the item id, and if yes - open item editor/details screen.
   */
  function useItemUrl() {
    const screens = useScreens();
    const match = useRouteMatch<{ id: string }>(`/${ROUTE}/:id`);

    <% if (!withItemComponent) { -%>
      const openItem = () => alert('Please specify the editor/details component');
      // TODO Uncomment the code below and use it in place of above callback
      // const openItem = useOpenItemScreen({
      //   route: ROUTE,
      //   screenComponent: ExampleComponentName, // TODO specify component name
      //   screenCaptionKey: 'screen.ExampleComponentName', // TODO specify screen caption key
      //   refetchQueries: REFETCH_QUERIES,
      //   id: match?.params.id
      // });
    <% } -%>
    <% if (withItemComponent) { -%>
      const openItem = useOpenItemScreen({
        route: ROUTE,
        screenComponent: <%= itemComponentName %>,
        screenCaptionKey: 'screen.<%= itemComponentName %>',
      <% if (mode === 'edit') { -%>
        refetchQueries: REFETCH_QUERIES,
      <% } -%>
        id: match?.params.id
      });
    <% } -%>

    useEffect(() => {
      if (screens.activeTab?.breadcrumbs.length === 1 && match?.params.id != null) {
        openItem();
      }
    });
  }
<% } -%>

<% if (mode === 'edit') { -%>
  /**
   * Button panel above the cards
   */
  function ButtonPanel() {
    const intl = useIntl();

    // A callback that will open an empty editor form so that a new entity instance can be created
    <% if (!withItemComponent) { -%>
      const openEmptyEditor = () => alert('Please specify the editor component');
      // TODO Uncomment the code below and use it in place of above callback
      // const openEmptyEditor = useOpenItemScreen({
      //   route: ROUTE,
      //   screenComponent: ExampleComponentName, // TODO specify component name
      //   screenCaptionKey: 'screen.ExampleComponentName', // TODO specify screern caption key
      //   refetchQueries: REFETCH_QUERIES
      // });
    <% } -%>
    <% if (withItemComponent) { -%>
      const openEmptyEditor = useOpenItemScreen({
        route: ROUTE,
        screenComponent: <%= itemComponentName %>,
        screenCaptionKey: 'screen.<%= itemComponentName %>',
        refetchQueries: REFETCH_QUERIES
      });
    <% } -%>

    return (
      <div>
        <Button
          htmlType="button"
          key="create"
          title={intl.formatMessage({id: "common.create"})}
          type="primary"
          icon={<PlusOutlined />}
          onClick={openEmptyEditor}
        >
        <span>
          <FormattedMessage id="common.create" />
        </span>
        </Button>
      </div>
    );
  }
<% } -%>

<% if (withFilters) { -%>
  <%- include('Filters', filters) %>
<% } -%>

interface ItemCardsListProps {
  items?: ItemListType;
  loading?: boolean;
  error?: ApolloError;
}

/**
 * Collection of cards, each card representing an item
 */
function Cards({items, loading, error}: ItemCardsListProps) {
  if (loading) {
    return <Spin />;
  }

  if (error) {
    return (
      <RequestFailedError />
    );
  }

  if (items == null || items.length === 0) {
    return <Empty />;
  }

  return (
    <Space direction="vertical" className="card-space">
      {items.map(item => (
        <ItemCard item={item} key={item?.id} />
      ))}
    </Space>
  );
}

function ItemCard({item}: {item: ItemType}) {
  // Get the action buttons that will be displayed in the card
  const cardActions: ReactNode[] = useCardActions(item);

  if (item == null) {
    return null;
  }

  return (
    <Card key={item.id}
          title={get<%= capitalizeFirst(entityName) %>DisplayName(item)}
          actions={cardActions}
          className="narrow-layout"
    >
      <% attributes.forEach(attr => { -%>
        <ValueWithLabel key='<%= attr.name %>'
                        label='<%= attr.displayName %>'
                        <% if (attr.isRelationField) { -%>
                          value={get<%= capitalizeFirst(attr.type) %>DisplayName(item.<%= attr.name %> ?? undefined)}
                        <% } else if (attr.type === 'Date') { -%>
                          value={item.<%= attr.name %>?.format('LL') ?? undefined}
                        <% } else { -%>
                          value={item.<%= attr.name %> ?? undefined}
                        <% } -%>
        />
      <% }) -%>
    </Card>
  );
}

/**
 * Returns action buttons that will be displayed inside the card.
 */
function useCardActions(item: ItemType): ReactNode[] {
  const intl = useIntl();

  <% if (mode === 'edit' || mode === 'view with details') { -%>
    // Callback that opens a details screen or an editor either for creating or for editing an item
    // depending on whether `item` is provided
    <% if (!withItemComponent) { -%>
      const openItem = () => alert('Please specify the editor/details component');
      // TODO Uncomment the code below and use it in place of above callback
      // const openItem = useOpenItemScreen({
      //   route: ROUTE,
      //   screenComponent: ExampleComponentName, // TODO specify component name
      //   screenCaptionKey: 'screen.ExampleComponentName', // TODO specify screen caption key
      //   refetchQueries: REFETCH_QUERIES,
      //   id: item?.id
      // });
    <% } -%>
    <% if (withItemComponent) { -%>
      const openItem = useOpenItemScreen({
        route: ROUTE,
        screenComponent: <%= itemComponentName %>,
        screenCaptionKey: 'screen.<%= itemComponentName %>',
      <% if (mode === 'edit') { -%>
        refetchQueries: REFETCH_QUERIES,
      <% } -%>
        id: item?.id
      });
    <% } -%>
  <% } -%>

  <% if (withDeleteAction) { -%>
    const [runDeleteMutation] = useMutation(<%= MUTATION_CONST %>);
    // Callback that deletes the item
    const deleteItem = useDeleteItem(item?.id, runDeleteMutation, REFETCH_QUERIES);
  <% } -%>

  return [
    <% if (mode === 'edit') { -%>
      <EditOutlined
        key="edit"
        title={intl.formatMessage({ id: "common.edit" })}
        onClick={openItem}
      />,
    <% } -%>
    <% if (mode === 'view with details') { -%>
      <EnterOutlined
        key="open"
        title={intl.formatMessage({ id: "common.open" })}
        onClick={openItem}
      />,
    <% } -%>
    <% if (withDeleteAction) { -%>
      <DeleteOutlined
        key="delete"
        title={intl.formatMessage({ id: "common.remove" })}
        onClick={deleteItem}
      />
    <% } -%>
  ];
}

/**
 * Type of data object received when executing the query
 */
type QueryResultType = ResultOf<typeof <%= QUERY_CONST %>>;
/**
 * Type of the items list
 */
type ItemListType = QueryResultType['<%= queryName %>'];
/**
 * Type of a single item
 */
type ItemType = Exclude<ItemListType, null | undefined>[0];
