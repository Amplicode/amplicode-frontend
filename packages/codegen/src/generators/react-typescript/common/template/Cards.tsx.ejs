<%#

Cards template provides ability to generate three types of List components.
Type of component should be configured in 'mode' variable:

* mode === 'edit' - default mode which is used when List items could be edited via additional
    component ('itemComponentName')
* mode === 'view' - no additional item component provided
* mode === 'view with details' - here item component is the component that show item details without ability to edit


Beside mode, there are additional options for template config:

* 'withDeleteAction' - defines if there should be delete button on screen or not. Yes if 'deleteMutationName' and
    'deleteMutationString' provided
* 'withItemComponent' - defines if item component defined and passed in 'itemComponentName'

-%>
<% var withItemComponent = itemComponentName !== null; -%>
<% var withDeleteAction = locals.deleteMutationString != null && locals.deleteMutationName != null; -%>

import { observer } from "mobx-react";
import { gql } from '@amplicode/gql';
<% if (withDeleteAction) { -%>
  import { Exact } from '@amplicode/gql/graphql';
<% } -%>
import {
  useQuery,
  <% if (withDeleteAction) { -%>
    useMutation
  <% } -%>
} from "@apollo/client";
import {
  CheckOutlined,
  CloseOutlined,
  <% if (withDeleteAction) { -%>
    DeleteOutlined,
  <% } -%>
  <% if (mode === 'view with details') { -%>
    EnterOutlined,
  <% } -%>
  <% if (mode === 'edit') { -%>
    EditOutlined,
    PlusOutlined,
  <% } -%>
} from '@ant-design/icons';
import {
  Button,
  Card,
  <% if (mode === 'edit') { -%>
    Modal,
  <% } -%>
  Spin,
  Empty,
  Result,
} from "antd";
import { FormattedMessage, IntlShape, useIntl } from "react-intl";
<% if (withDeleteAction) { -%>
  import { MutationFunctionOptions } from "@apollo/client/react/types/types";
  import { FetchResult } from "@apollo/client/link/core";
<% } -%>
import { useCallback, useEffect } from "react";
import {
<% if (withItemComponent) { -%>
  useHistory,
<% } -%>
  useRouteMatch
} from "react-router-dom";
import {
  EntityListScreenProps,
  guessDisplayName,
  guessLabel,
<% if (withItemComponent) { -%>
  OpenInBreadcrumbParams,
<% } -%>
  Screens,
  useScreens,
  useDefaultBrowserHotkeys
} from "@amplicode/react-core";
<% if (withItemComponent) { -%>
import { <%= itemComponentName %> } from "./<%= itemComponentName %>"
<% } -%>


const ROUTE = '<%= route %>';

const <%= toFatSnakeCase(queryName) %> = gql(/* GraphQL */ `
  <%= queryString %>
`);

<% if (withDeleteAction) { -%>
const <%= toFatSnakeCase(deleteMutationName) %> = gql(/* GraphQL */ `
  <%= deleteMutationString %>
`);
<% } -%>

export const <%= componentName %> = observer(({ onSelect }: EntityListScreenProps) => {
  const screens: Screens = useScreens();
  const intl = useIntl();
  const match = useRouteMatch<{ entityId: string }>(`/${ROUTE}/:entityId`);
<% if (withItemComponent) { -%>
  const history = useHistory();
<% } -%>

  const { loading, error, data } = useQuery(<%= toFatSnakeCase(queryName) %>);

  <% if (withDeleteAction) { -%>
  const [executeDeleteMutation] = useMutation(<%= toFatSnakeCase(deleteMutationName) %>, {
    refetchQueries: [<%= toFatSnakeCase(queryName) %>]
  });
  <% } -%>

  // Entity list can work in select mode, which means that you can select an entity instance and it will be passed to onSelect callback.
  // This functionality is used in EntityLookupField.
  const isSelectMode = onSelect != null;

<% if (mode !== 'view' && withItemComponent) { -%>
  const openItem = useCallback(
    (id?: string) => {
      const params: OpenInBreadcrumbParams = {
        breadcrumbCaption: intl.formatMessage({ id: "screen.<%= itemComponentName %>" }),
        component: <%= itemComponentName %>,
      };
      if (id != null && id !== 'new') {
        params.props = { id };
      }
      screens.openInBreadcrumb(params);
      // Append /id to existing url
      history.push(id ? `/${ROUTE}/${id}` : `/${ROUTE}/new`);
    },
    [screens, history, intl]
  );
<% } -%>

<% if (mode !== 'view' && !withItemComponent) { -%>
const openItem = useCallback(
    (id?: string) => {
    // TODO Uncomment the code below, specify the editor component and remove the alert
    alert('Please specify the editor component');
    // const params: OpenInBreadcrumbParams = {
    //   breadcrumbCaption: intl.formatMessage({ id: "screen.ExampleComponentName" }), // TODO specify message id
    //   component: ExampleComponentName, // TODO specify component name
    // };
    // if (id != null && id !== 'new') {
    //   params.props = { id };
    // }
    // screens.openInBreadcrumb(params);
    // // Append /id to existing url
    // history.push(id ? `/${ROUTE}/${id}` : `/${ROUTE}/new`);
    },
    []
);
<% } -%>

  useEffect(() => {
    if (
      screens.activeTab?.breadcrumbs.length === 1 &&
      match?.params.entityId != null
    ) {
      openItem(match.params.entityId);
    }
  }, [match, openItem, screens]);

  useDefaultBrowserHotkeys({ openEditor: openItem });

  if (loading) {
    return <Spin />;
  }

  if (error) {
    return (
      <Result
        status="error"
        title={<FormattedMessage id="common.requestFailed" />}
      />
    );
  }

  const items = data?.<%= queryName %>;

  return (
    <div className="narrow-layout">
      <% if (mode === 'edit') { -%>
        {!isSelectMode && (
          <div style={{ marginBottom: "12px" }}>
            <Button
              htmlType="button"
              key="create"
              title='intl.formatMessage({id: "common.create"})'
              type="primary"
              icon={<PlusOutlined />}
              onClick={() => openItem()}
          >
              <span>
                <FormattedMessage id="common.create"/>
              </span>
            </Button>
          </div>
        )}
      <% } -%>
      {isSelectMode && (
        <div style={{ marginBottom: "12px" }}>
          <Button
            htmlType="button"
            key="close"
            title='intl.formatMessage({id: "common.close"})'
            type="primary"
            icon={<CloseOutlined />}
            onClick={screens.closeActiveBreadcrumb}
          >
            <span>
              <FormattedMessage id="common.close" />
            </span>
          </Button>
        </div>
      )}

      {items == null || items.length === 0 ? (
        <Empty />
      ) : (
        items.map((e: any) => (
          <Card
            key={e["<%= idField %>"]}
            title={guessDisplayName(e)}
            style={{ marginBottom: "12px" }}
            actions={getCardActions({
                      screens,
                      entityInstance: e,
                      onSelect,
                      <% if (withDeleteAction) { -%>
                        executeDeleteMutation,
                      <% } -%>
                      intl,
                      openItem
                     })}
          >
            <Fields entity={e} />
          </Card>
        ))
      )}
    </div>
  );
});

const Fields = ({ entity }: { entity: any }) => (
  <>
    {Object.keys(entity)
      .filter(p => p !== "<%= idField %>" && entity[p] != null)
      .map(p => (
        <div key={p}>
          <strong>{guessLabel(p)}:</strong> {renderFieldValue(entity, p)}
        </div>
      ))}
  </>
);

function renderFieldValue(entity: any, property: string): string {
  return typeof entity[property] === "object"
    ? guessDisplayName(entity[property])
    : String(entity[property]);
}

interface CardActionsInput {
  screens: Screens;
  entityInstance: any;
  onSelect?: (entityInstance: this['entityInstance']) => void;
  <% if (withDeleteAction) { -%>
    executeDeleteMutation: (
    options?: MutationFunctionOptions<any, Exact<{ id: any }>>
    ) => Promise<FetchResult>;
  <% } -%>
  intl: IntlShape;
  openItem: (id?: string) => void;
}

function getCardActions(input: CardActionsInput) {
  const {
    screens,
    entityInstance,
    onSelect,
    <% if (withDeleteAction) { -%>
      executeDeleteMutation,
    <% } -%>
    intl,
    <% if (mode !== 'view') { -%>
        openItem,
    <% } -%>
  } = input;

  <% if (withDeleteAction || mode !== 'view') { %>
    if (onSelect == null) {
      return [
        <% if (withDeleteAction) { -%>
          <DeleteOutlined
                key="delete"
                title={intl.formatMessage({ id: "common.remove" })}
                onClick={() => {
                  Modal.confirm({
                    content: intl.formatMessage({
              id: "EntityListScreen.deleteConfirmation"
            }),
                    okText: intl.formatMessage({ id: "common.ok" }),
                    cancelText: intl.formatMessage({ id: "common.cancel" }),
                    onOk: () => {
                      return executeDeleteMutation({
                        variables: {
                          id: entityInstance.id
                        }
                      });
                    }
                  });
                }}
          />,
        <% } -%>
        <% if (mode === 'edit') { -%>
          <EditOutlined
                key="edit"
                title={intl.formatMessage({ id: "common.edit" })}
                onClick={() => {
                          openItem(entityInstance.id);
                        }}
          />
        <% } -%>
        <% if (mode === 'view with details') { -%>
          <EnterOutlined
                  key="details"
                  title={intl.formatMessage({id: "common.viewDetails"})}
                  onClick={() => {
                    openItem(entityInstance.id)
                  }}
          />
        <% } -%>
      ];
    }
  <% } else { -%>
    if (onSelect == null) {
      return [];
    }
  <% } -%>

  // onSelect != null
  return [
    <CheckOutlined
        key="select"
        title={intl.formatMessage({
        id: "EntityLookupField.selectEntityInstance"
      })}
        onClick={() => {
          onSelect(entityInstance);
          screens.closeActiveBreadcrumb();
        }}
    />
  ];

}
