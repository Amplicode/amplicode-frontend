<% const withItemComponent = locals.itemComponentName != null; -%>
<% const withDeleteAction = locals.deleteMutationString != null && locals.deleteMutationName != null; -%>
<% const hasRelationFields = attributes.some(attr => attr.isRelationField) -%>
<% const hasCustomScalars = attributes.some(attr => attr.type === 'Date') -%>
<% const tableCssClass = mode === 'edit' ? 'entity-table' : 'entity-table-readonly' -%>
<% const QUERY_CONST = toFatSnakeCase(queryName); -%>
<% const MUTATION_CONST = deleteMutationName ? toFatSnakeCase(deleteMutationName) : undefined; -%>
<%# ------- TEMPLATE STARTS HERE ------- -%>
import {
  <% if (mode === 'edit' || mode === 'view with details') { -%>
    useEffect,
  <% } -%>
  <% if (withFilters || mode === 'edit' || mode === 'view with details') { -%>
    useState,
  <% } -%>
} from "react";
import {
  useQuery,
  <% if (withDeleteAction) { -%>
    useMutation,
  <% } -%>
} from "@apollo/client";
import {ApolloError} from "@apollo/client/errors";
import {
  ResultOf,
  <% if (withFilters) { -%>
    VariablesOf,
  <% } -%>
} from "@graphql-typed-document-node/core";
import {
  <% if (withFilters || mode === 'edit') { -%>
    Button,
  <% } -%>
  <% if (withDeleteAction) {-%>
    Modal, message,
  <% } -%>
  <% if (withFilters) { -%>
    Card,
    Row,
    Col,
    Form,
    <% if (filterImports.withFilterNumber) { -%>
      InputNumber,
    <% } -%>
    <% if (filterImports.withFilterString) { -%>
      Input,
    <% } -%>
    <% if (filterImports.withFilterCheckbox) { -%>
      Checkbox,
    <% } -%>
    <% if (filterImports.withFilterDate) { -%>
      DatePicker,
    <% } -%>
  <% } -%>
  Empty,
  Space,
  Spin,
  Table
} from "antd";
<% if (withFilters) { -%>
  import { useForm } from "antd/lib/form/Form";
<% } -%>
<% if (withFilters || withDeleteAction || mode === 'edit') { -%>
  import {
    <% if (mode === 'edit') { -%>
      PlusOutlined,
    <% } -%>
    <% if (mode === 'view with details') { -%>
      EnterOutlined,
    <% } -%>
    <% if (filterImports.withFilterNumber || filterImports.withFilterString) { -%>
      CloseCircleOutlined,
    <% } -%>
  } from "@ant-design/icons";
<% } -%>
<% if (mode === 'edit' || mode === 'view with details') { -%>
  import { useNavigate } from "react-router-dom";
<% } -%>
<% if (withFilters || mode === 'edit') { -%>
  import {
    FormattedMessage,
    <% if (mode === 'edit') { -%>
        useIntl,
    <% } -%>
  } from "react-intl";
<% } -%>
import {gql} from "@amplicode/gql";
<% if (withItemComponent) { -%>
  import { <%= itemComponentName %> } from "./<%= itemComponentName %>"
<% } -%>
<% if (withDeleteAction) { -%>
  import {useDeleteItem} from "<%= relDirShift %>core/crud/useDeleteItem";
  import {GraphQLError} from "graphql/error/GraphQLError";
  import {FetchResult} from "@apollo/client/link/core";
<% } -%>
import {RequestFailedError} from "<%= relDirShift %>core/crud/RequestFailedError";
import {deserialize} from "<%= relDirShift %>core/transform/model/deserialize";
<% attributes.filter(a => a.isRelationField).forEach(attribute => { -%>
  import { get<%= capitalizeFirst(attribute.type) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(attribute.type) %>DisplayName';
<% }) -%>

<% if (withDeleteAction || mode === 'edit') { -%>
  const REFETCH_QUERIES = ['<%= refetchQuery %>'];
<% } -%>

const <%= QUERY_CONST %> = gql(`
  <%= queryString %>
`);

<% if (withDeleteAction) { -%>
const <%= MUTATION_CONST %> = gql(`
  <%= deleteMutationString %>
`);
<% } -%>

const columns = [

<% attributes.forEach(attr => { -%>
  {
    title: '<%= attr.displayName %>',
    dataIndex: '<%= attr.name %>',
    key: '<%= attr.name %>'
  },
<% }) -%>

];

<% if (withFilters) { -%>
  const initialFilterVars: QueryVariablesType = {};
<% } -%>

export function <%= componentName %>() {
  <% if (withFilters) { -%>
    const [filterVars, setFilterVars] = useState<QueryVariablesType>(initialFilterVars);

    // Load the items from server. Will be reloaded reactively if one of variable changes
    const { loading, error, data } = useQuery(<%= QUERY_CONST %>, { variables: filterVars });
    const items = deserialize(data?.<%= queryName %>);
  <% } else { -%>
    // Load the items from server
    const { loading, error, data } = useQuery(<%= QUERY_CONST %>);
    const items = deserialize(data?.<%= queryName %>);
  <% } -%>
  // selected row id
  const [selectedRowId, setSelectedRowId] = useState();

  <% if (mode === 'view with details') { -%>
    const navigate = useNavigate();

    // Open details if row selected
    useEffect(() => {
      if (selectedRowId != null) {
        navigate(selectedRowId);
      }
    }, [selectedRowId]);
  <% } -%>

  return (
    <div className="narrow-layout">
      <Space direction="vertical" className="table-space">
        <% if (mode === 'edit') { -%>
          <ButtonPanel selectedRowId={selectedRowId} />
        <% } -%>
        <% if (withFilters) { -%>
          <Card>
            <Filters onApplyFilters={setFilterVars} />
          </Card>
        <% } -%>
        <TableSection
          items={items}
          loading={loading}
          error={error}
          selectedRowId={selectedRowId}
          setSelectedRowId={setSelectedRowId}
        />
        {/* <Pagination /> - in future */}
      </Space>
    </div>
  );
}

<% if (mode === 'edit') { -%>
  /**
   * Button panel above
   */
  function ButtonPanel({selectedRowId}: { selectedRowId?: string }) {
    const intl = useIntl();
    const navigate = useNavigate();

    <% if (withDeleteAction) { -%>
        const showDeleteConfirm = useDeleteConfirm(selectedRowId!);
    <% } -%>

    return (
      <Space direction="horizontal">
        <Button
          htmlType="button"
          key="create"
          title={intl.formatMessage({ id: "common.create" })}
          type="primary"
          icon={<PlusOutlined />}
          onClick={() => navigate("new")}
        >
          <span>
            <FormattedMessage id="common.create" />
          </span>
        </Button>

        <Button
          htmlType="button"
          key="edit"
          title={intl.formatMessage({ id: "common.edit" })}
          disabled={selectedRowId == null}
          onClick={() => selectedRowId && navigate(selectedRowId)}
        >
          <span>
            <FormattedMessage id="common.edit" />
          </span>
        </Button>

        <% if (withDeleteAction) { -%>
          <Button
            htmlType="button"
            key="remove"
            title={intl.formatMessage({ id: "common.remove" })}
            disabled={selectedRowId == null}
            onClick={showDeleteConfirm}
          >
            <span>
              <FormattedMessage id="common.remove" />
            </span>
          </Button>
        <% } -%>
      </Space>
    );
  }
<% } -%>

<% if (withDeleteAction) { -%>
  /**
   * Returns a confirmation dialog and invokes delete mutation upon confirmation
   * @param id id of the entity instance that should be deleted
   */
  function useDeleteConfirm(id: string | null | undefined) {
    const intl = useIntl();

    const [runDeleteMutation, { loading }] = useMutation(<%= MUTATION_CONST %>);
    const deleteItem = useDeleteItem(
      id,
      runDeleteMutation,
      REFETCH_QUERIES
    );

    // Callback that deletes the item
    const handleDeleteItem = () => {
      deleteItem()
        .then(({ errors }: FetchResult) => {
          if (errors == null || errors.length === 0) {
            return handleDeleteSuccess();
          }
          return handleDeleteGraphQLError(errors);
        })
        .catch(handleDeleteNetworkError);
    }

    // Function that is executed when mutation is successful
    function handleDeleteSuccess() {
      return message.success(intl.formatMessage({ id: "EntityDetailsScreen.deletedSuccessfully" }));
    }

    // Function that is executed when mutation results in a GraphQL error
    function handleDeleteGraphQLError(errors: ReadonlyArray<GraphQLError> | undefined) {
      console.error(errors);
      return message.error(intl.formatMessage({ id: "common.requestFailed" }));
    }

    // Function that is executed when mutation results in a network error (such as 4xx or 5xx)
    function handleDeleteNetworkError(error: Error | ApolloError) {
      console.error(error);
      return message.error(intl.formatMessage({ id: "common.requestFailed" }));
    }

    return () =>
      Modal.confirm({
        content: intl.formatMessage({
          id: "EntityListScreen.deleteConfirmation"
        }),
        okText: intl.formatMessage({ id: "common.ok" }),
        okButtonProps: { loading },
        cancelText: intl.formatMessage({ id: "common.cancel" }),
        onOk: handleDeleteItem
      });
  }
<% } -%>

<% if (withFilters) { -%>
  <%- include('Filters', filters) %>
<% } -%>

interface TableSectionProps {
  items?: ItemTableType;
  loading?: boolean;
  error?: ApolloError;
  selectedRowId?: string;
  setSelectedRowId: (id: any) => any;
}

/**
 * Collection of items
 */
function TableSection({
  items,
  loading,
  error,
  selectedRowId,
  setSelectedRowId
}: TableSectionProps) {
  if (loading) {
    return <Spin />;
  }

  if (error) {
    return <RequestFailedError />;
  }

  if (items == null || items.length === 0) {
    return <Empty />;
  }

  const dataSource = items
      .filter(item => item != null)
      .map(item => ({
        ...item,
      <% if (hasRelationFields || hasCustomScalars) { -%>
        ...{
          <% attributes.forEach(attr => { -%>
            <% if (attr.isRelationField) { -%>
              <%= attr.name %>: get<%= capitalizeFirst(attr.type) %>DisplayName(item!.<%= attr.name %> ?? undefined),
            <% } else if (attr.type === 'Date') { -%>
              <%= attr.name %>: item!.<%= attr.name %>?.format('LL') ?? undefined,
            <% } -%>
          <% }) -%>
        }
      <% } -%>
      }));

  return (
    <Space direction="vertical" className="table-space <%= tableCssClass %>">
      <Table
        dataSource={dataSource as object[]}
        columns={columns}
        rowClassName={record =>
          (record as ItemType)?.id === selectedRowId ? "table-row-selected" : ""
        }
        onRow={data => {
          return {
            onClick: () => {
              const id = (data as ItemType)?.id;
              setSelectedRowId(id === selectedRowId ? null : id);
            }
          };
        }}
      />
    </Space>
  );
}

/**
 * Type of data object received when executing the query
 */
type QueryResultType = ResultOf<typeof <%= QUERY_CONST %>>;
<% if (withFilters) { -%>
  /**
  * Type of variables used to filter the items list
  */
  type QueryVariablesType = VariablesOf<typeof <%= QUERY_CONST %>>;
<% } -%>
/**
 * Type of the items list
 */
type ItemTableType = QueryResultType['<%= queryName %>'];
/**
 * Type of a single item
 */
type ItemType = Exclude<ItemTableType, null | undefined>[0];
