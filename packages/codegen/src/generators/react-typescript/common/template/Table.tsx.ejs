<% const withDeleteAction = locals.deleteMutationString != null && locals.deleteMutationName != null; -%>
<% const hasRelationFields = attributes.some(attr => attr.isSingleRelationField || attr.isMultiRelationField) -%>
<% const hasCustomScalars = attributes.some(attr => attr.type === 'Date') -%>
<% const tableCssClass = mode === 'edit' ? 'entity-table' : 'entity-table-readonly' -%>
<% const QUERY_CONST = toFatSnakeCase(queryName); -%>
<% const MUTATION_CONST = deleteMutationName ? toFatSnakeCase(deleteMutationName) : undefined; -%>
<%# ------- TEMPLATE STARTS HERE ------- -%>
import {
  <% if (mode === 'view with details') { -%>
    useEffect,
  <% } -%>
  <% if (withFilters || mode === 'edit' || mode === 'view with details') { -%>
    useState,
  <% } -%>
  <% if (withFilters || withOrderBy || withPagination) { -%>
    useCallback,
  <% } -%>
} from "react";
import {
  useQuery,
  <% if (withDeleteAction) { -%>
    useMutation,
  <% } -%>
} from "@apollo/client";
import {ApolloError} from "@apollo/client/errors";
import {
  ResultOf,
  <% if (withFilters) { -%>
    VariablesOf,
  <% } -%>
} from "@graphql-typed-document-node/core";
import {
  <% if (withFilters || mode === 'edit') { -%>
    Button,
  <% } -%>
  <% if (withDeleteAction) {-%>
    Modal, message,
  <% } -%>
  <% if (withFilters) { -%>
    Card,
    Row,
    Col,
    Form,
    <% if (filterUsingScalars.hasStringScalars || filterUsingScalars.hasUnknownCustomScalars) { -%>
      Input,
    <% } -%>
    <% if (filterUsingScalars.hasIntScalars || filterUsingScalars.hasFloatScalars) { -%>
      InputNumber,
    <% } -%>
    <% if (filterUsingScalars.hasBooleanScalars) { -%>
      Checkbox,
    <% } -%>
    <% if (filterUsingScalars.hasEnumScalars) { -%>
      Select,
    <% } -%>
  <% } -%>
  <% if (withHiddenFilters) { -%>
    Badge,
  <% } -%>
  <% if (withPagination) { -%>
    Pagination,
  <% } -%>
  <% if (withOrderBy) { -%>
    Select,
  <% } -%>
  Space,
  Table
} from "antd";
<% if (withFilters) { -%>
  import { useForm } from "antd/lib/form/Form";
  import { serializeVariables } from '<%= relDirShift %>core/transform/model/serializeVariables';
<% } -%>
<% if (filterUsingScalars.hasRelationFields) { -%>
  import {EntityLookupField} from '<%= relDirShift %>core/crud/entity-lookup-field/EntityLookupField';
<% } -%>
<% if (filterUsingScalars.hasDateScalars || filterUsingScalars.hasTimeScalars) { -%>
  import {
    <% if (filterUsingScalars.hasDateScalars) { -%>
      DatePicker,
    <% } -%>
    <% if (filterUsingScalars.hasTimeScalars) { -%>
      TimePicker,
    <% } -%>
  } from '@amplicode/react';
<% } -%>
<% if (withFilters || withDeleteAction || mode === 'edit') { -%>
  import {
    <% if (mode === 'edit') { -%>
      PlusOutlined,
    <% } -%>
    <% if (mode === 'view with details') { -%>
      EnterOutlined,
    <% } -%>
    <% if (filterUsingScalars.hasStringScalars) { -%>
      CloseCircleOutlined,
    <% } -%>
    <% if (withHiddenFilters) { -%>
      UpOutlined,
      DownOutlined,
    <% } -%>
    <% if (withOrderBy) { -%>
      ArrowUpOutlined,
      ArrowDownOutlined,
    <% } -%>
  } from "@ant-design/icons";
<% } -%>
<% if (mode === 'edit' || mode === 'view with details') { -%>
  import { useNavigate } from "react-router-dom";
<% } -%>
import {
  <% if (withFilters || mode === 'edit') { -%>
    FormattedMessage,
  <% } -%>
  useIntl,
} from "react-intl";
import {gql} from "<%= relDirShift %>gql";
<% if (withDeleteAction) { -%>
  import {useDeleteItem} from "<%= relDirShift %>core/crud/useDeleteItem";
  import {GraphQLError} from "graphql/error/GraphQLError";
  import {FetchResult} from "@apollo/client/link/core";
<% } -%>
import {RequestFailedError} from "<%= relDirShift %>core/crud/RequestFailedError";
import {deserialize} from "<%= relDirShift %>core/transform/model/deserialize";
<% attributes.filter(attr => attr.isSingleRelationField || attr.isMultiRelationField).forEach(attribute => { -%>
  import { get<%= capitalizeFirst(attribute.type) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(attribute.type) %>DisplayName';
<% }) -%>
import {useBreadcrumbItem} from "<%= relDirShift %>core/screen/useBreadcrumbItem";
<% if (withHiddenFilters) { -%>
  import { NamePath } from "antd/lib/form/interface";
<% } -%>
<% if (withFilters || withOrderBy || withPagination) { -%>
  import { mergeDeep } from "@apollo/client/utilities";
<% } -%>
<% if (withOrderBy) { -%>
  import { Direction, OwnerOrderByProperty } from "<%= relDirShift %>gql/graphql";
  import { DefaultOptionType } from "antd/lib/select";
<% } -%>
<% if (locals?.paginationType === 'offset') { -%>
  import { OffsetPaginationType } from "<%= relDirShift %>core/crud/OffsetPaginationType";
<% } -%>

<% if (withDeleteAction || mode === 'edit') { -%>
  const REFETCH_QUERIES = ['<%= refetchQuery %>'];
<% } -%>

const <%= QUERY_CONST %> = gql(`
  <%= queryString %>
`);

<% if (withDeleteAction) { -%>
const <%= MUTATION_CONST %> = gql(`
  <%= deleteMutationString %>
`);
<% } -%>

const columns = [

<% attributes.forEach(attr => { -%>
  {
    title: '<%= attr.displayName %>',
    dataIndex: '<%= attr.name %>',
    <% if (attr.type === 'Url' ){ -%>
      render: (url: string) => (
        <a target="_blank" rel="noreferrer" href={url}>
          {url}
        </a>
      ),
    <% } -%>
    key: '<%= attr.name %>'
  },
<% }) -%>

];

<% if (withFilters) { -%>
const initialQueryVariables: QueryVariablesType = {};
<% } -%>
<% if (locals?.paginationType === 'offset') { -%>
  const initialPagination: OffsetPaginationType = {
    current: 1,
    pageSize: 10
  };
<% } -%>

export function <%= componentName %>() {
  const intl = useIntl();
  useBreadcrumbItem(intl.formatMessage({id: 'screen.<%= componentName %>'}));

  <% if (withFilters || withOrderBy || withPagination) { -%>
    const [queryVariables, setQueryVariables] = useState<QueryVariablesType>(
      initialQueryVariables
    );

    // Load the items from server. Will be reloaded reactively if one of variable changes
    const { loading, error, data } = useQuery(<%= QUERY_CONST %>, { variables: queryVariables });

    const mergeQueryVariales = useCallback((newQueryVariables: QueryVariablesType) => {
      setQueryVariables(queryVariables =>
        mergeDeep(
          queryVariables,
          newQueryVariables
        )
      )
    }, []);
  <% } else { -%>
    // Load the items from server
    const { loading, error, data } = useQuery(<%= QUERY_CONST %>);
  <% } -%>
  <% if (locals?.paginationType === 'offset') { -%>
    const items = deserialize(data?.<%= queryName %>?.content);
  <% } else { -%>
    const items = deserialize(data?.<%= queryName %>);
  <% } -%>

  <% if (locals?.paginationType === 'offset') { -%>
    const [pagination, setPagination] = useState<OffsetPaginationType>(initialPagination);

    const changePagination = useCallback(
      (pagination: OffsetPaginationType) => {
        setPagination(pagination);
        mergeQueryVariales({
          page: {
            number: pagination.current - 1,
            size: pagination.pageSize
          }
        });
      },
      [mergeQueryVariales]
    );
    const applyPagination = useCallback(
      (current: number, pageSize: number) => changePagination({
          current,
          pageSize,
        })
      ,
      [changePagination]
    );
  <% } -%>

  <% if (withOrderBy) { -%>
    const [sortValue, setSortValue] = useState<QueryVariablesType['sort']>();

    const applySort = useCallback((newSortValue: QueryVariablesType['sort'] | undefined) => {
      mergeQueryVariales({ sort: newSortValue });
      setSortValue(newSortValue);
    }, [mergeQueryVariales]);
  <% } -%>

  <% if (withFilters) { -%>
    const applyFilters = useCallback((filters: QueryVariablesType) => {
      mergeQueryVariales(serializeVariables(<%= QUERY_CONST %>, filters));
      <% if (locals?.paginationType === 'offset') { -%>
        changePagination(initialPagination);
      <% } -%>
    }, [<% if (locals?.paginationType === 'offset') { -%> changePagination, <% } -%> mergeQueryVariales]);
  
    <% if (withOrderBy) { -%>
      const afterResetFilters = useCallback(() => applySort(undefined), [applySort]);  
    <% } -%>
  <% } -%>

  // selected row id
  <% if (multiselect) { -%>
    const [selectedRowIds, setSelectedRowIds] = useState([]);
  <% } else { -%>
    const [selectedRowId, setSelectedRowId] = useState();
  <% } -%>

  <% if (mode === 'view with details') { -%>
    const navigate = useNavigate();

    // Open details if row selected
    useEffect(() => {
      <% if (multiselect) { -%>
        if (selectedRowIds.length > 0) {
          navigate(selectedRowIds[0])
        }
      }, [navigate, selectedRowIds]);
      <% } else { -%>
        if (selectedRowId != null) {
          navigate(selectedRowId);
        }
      }, [navigate, selectedRowId]);
      <% } -%>
  <% } -%>

  return (
    <div className="narrow-layout">
      <Space direction="vertical" className="table-space">
        <% if (withFilters) { -%>
          <Card>
            <Filters
              onApplyFilters={applyFilters}
              <% if (withOrderBy) { -%>
                onAfterReset={afterResetFilters}
              <% } -%>
            />
          </Card>
        <% } -%>
        <% if (mode === 'edit') { -%>
          <ButtonPanel
            <% if (multiselect) { -%>
              selectedRowIds={selectedRowIds}
              setSelectedRowIds={setSelectedRowIds}
            <% } else { -%>
              selectedRowId={selectedRowId}
            <% } -%>
            <% if (withOrderBy) { -%>
              onApplySort={applySort} sortValue={sortValue}
            <% } -%>
          />
        <% } -%>
        <TableSection
          items={items}
          loading={loading}
          error={error}
          <% if (multiselect) { -%>
            selectedRowIds={selectedRowIds}
            setSelectedRowIds={setSelectedRowIds}
          <% } else { -%>
            selectedRowId={selectedRowId}
            setSelectedRowId={setSelectedRowId}
          <% } -%>
        />
        <% if (locals?.paginationType === 'offset') { -%>
          <Pagination
            current={pagination?.current}
            pageSize={pagination?.pageSize}
            onChange={applyPagination}
            showSizeChanger
            total={data?.ownerListByNamesFilterOffsetPageSorted?.totalElements}
          />
        <% } -%>
      </Space>
    </div>
  );
}

<% if (withOrderBy) { -%>
  <%- include('OrderBySelectOptions', locals) %>
<% } -%>

<% if (mode === 'edit' || withOrderBy) { -%>
  interface ButtonPanelProps {
    <% if (multiselect) { -%>
      selectedRowIds: string[], 
      setSelectedRowIds: (id: any) => any
    <% } else { -%>
      selectedRowId?: string
    <% } -%>
    <% if (withOrderBy) { -%>
      onApplySort: (sort: QueryVariablesType['sort']) => void;
      sortValue?: QueryVariablesType['sort'];
    <% } -%>
  }
  /**
   * Button panel above
   */
  function ButtonPanel({
    <% if (multiselect) { -%>
      selectedRowIds, setSelectedRowIds,
    <% } else { -%>
      selectedRowId,
    <% } -%>
    <% if (withOrderBy) { -%>
      onApplySort, sortValue,
    <% } -%>
  }: ButtonPanelProps) {
    const intl = useIntl();
    const navigate = useNavigate();

    <% if (withDeleteAction) { -%>
      const { showDeleteConfirm, deleting } = useDeleteConfirm(
        <% if (multiselect) { -%>
          selectedRowIds[0], setSelectedRowIds
        <% } else { -%>
          selectedRowId!
        <% } -%>
      );
    <% } -%>

    return (
      <%- include('OrderByButtonWrapperStart', locals) -%>
        <Space direction="horizontal">
          <Button
            htmlType="button"
            key="create"
            title={intl.formatMessage({ id: "common.create" })}
            type="primary"
            icon={<PlusOutlined />}
            onClick={() => navigate("new")}
          >
            <span>
              <FormattedMessage id="common.create" />
            </span>
          </Button>
          <Button
            htmlType="button"
            key="edit"
            title={intl.formatMessage({ id: "common.edit" })}
            disabled={
              <% if (multiselect) { -%>
                selectedRowIds.length !== 1
              <% } else { -%>
                selectedRowId == null
              <% } -%>
            }
            onClick={() => 
              <% if (multiselect) { -%>
                selectedRowIds.length > 0 && navigate(selectedRowIds[0])
              <% } else { -%>
                selectedRowId && navigate(selectedRowId)
              <% } -%>
            }
          >
            <span>
              <FormattedMessage id="common.edit" />
            </span>
          </Button>
          <% if (withDeleteAction) { -%>
            <Button
              htmlType="button"
              key="remove"
              title={intl.formatMessage({ id: "common.remove" })}
              disabled={
                <% if (multiselect) { -%>
                  selectedRowIds.length !== 1
                <% } else { -%>
                  selectedRowId == null
                <% } -%>
              }
              loading={deleting}
              onClick={showDeleteConfirm}
            >
              <span>
                <FormattedMessage id="common.remove" />
              </span>
            </Button>
          <% } -%>
        </Space>
      <%- include('OrderByButtonWrapperEnd', locals) -%>
    );
  }
<% } -%>

<% if (withDeleteAction) { -%>
  /**
   * Returns a confirmation dialog and invokes delete mutation upon confirmation
   * @param id id of the entity instance that should be deleted
   */
  function useDeleteConfirm(
    id: string | null | undefined,
    <% if (multiselect) { -%>
      setSelectedRowIds: (id: any) => any
    <% } -%> 
  ) {
    const intl = useIntl();

    const [runDeleteMutation, { loading }] = useMutation(<%= MUTATION_CONST %>);
    const deleteItem = useDeleteItem(
      id,
      runDeleteMutation,
      REFETCH_QUERIES
    );

    // Callback that deletes the item
    const handleDeleteItem = () => {
      deleteItem()
        .then(({ errors }: FetchResult) => {
          if (errors == null || errors.length === 0) {
            return handleDeleteSuccess();
          }
          return handleDeleteGraphQLError(errors);
        })
        .catch(handleDeleteNetworkError);
    }

    // Function that is executed when mutation is successful
    function handleDeleteSuccess() {
      <% if (multiselect) { -%>
        setSelectedRowIds([])
      <% } -%> 
      return message.success(intl.formatMessage({ id: "EntityDetailsScreen.deletedSuccessfully" }));
    }

    // Function that is executed when mutation results in a GraphQL error
    function handleDeleteGraphQLError(errors: ReadonlyArray<GraphQLError> | undefined) {
      console.error(errors);
      return message.error(intl.formatMessage({ id: "common.requestFailed" }));
    }

    // Function that is executed when mutation results in a network error (such as 4xx or 5xx)
    function handleDeleteNetworkError(error: Error | ApolloError) {
      console.error(error);
      return message.error(intl.formatMessage({ id: "common.requestFailed" }));
    }

    return {
      showDeleteConfirm: () =>
      Modal.confirm({
        content: intl.formatMessage({
          id: "EntityListScreen.deleteConfirmation"
        }),
        okText: intl.formatMessage({ id: "common.ok" }),
        cancelText: intl.formatMessage({ id: "common.cancel" }),
        onOk: handleDeleteItem
      }),
      deleting: loading
    }
  }
<% } -%>

<% if (withFilters) { -%>
  <%- include('Filters', filters) %>
<% } -%>

interface TableSectionProps {
  items?: ItemTableType;
  loading?: boolean;
  error?: ApolloError;
  <% if (multiselect) { -%>
    selectedRowIds: string[];
    setSelectedRowIds: (id: any) => any;
  <% } else { -%>
    selectedRowId?: string;
    setSelectedRowId: (id: any) => any;
  <% } -%>
}

/**
 * Collection of items
 */
function TableSection({
  items,
  loading,
  error,
  <% if (multiselect) { -%>
    selectedRowIds,
    setSelectedRowIds
  <% } else { -%>
    selectedRowId,
    setSelectedRowId
  <% } -%> 
}: TableSectionProps) {
  if (error) {
    return <RequestFailedError />;
  }

  const dataSource = items
      ?.filter(item => item != null)
      .map(item => ({
        key: item?.<%= idField %>,
        ...item,
      <% if (hasRelationFields || hasCustomScalars) { -%>
        ...{
          <% attributes.forEach(attr => { -%>
            <% if (attr.isSingleRelationField) { -%>
              <%= attr.name %>: get<%= capitalizeFirst(attr.type) %>DisplayName(item!.<%= attr.name %> ?? undefined),
            <% } else if (attr.isMultiRelationField) { -%>
              <%= attr.name %>:
                item &&
                item.<%= attr.name %> &&
                item.<%= attr.name %>
                  .map(entry => get<%= capitalizeFirst(attr.type) %>DisplayName(entry))
                  .filter(entry => entry !== "")
                  .join(", "),
            <% } else if (attr.type === 'Date') { -%>
              <%= attr.name %>: item!.<%= attr.name %>?.format("LL") ?? undefined,
            <% } else if (attr.type === 'LocalDateTime' || attr.type === 'DateTime' || attr.type === 'Timestamp') { -%>
              <%= attr.name %>: item!.<%= attr.name %>?.format("LLL") ?? undefined,
            <% } else if (attr.type === 'LocalTime' || attr.type === 'Time') { -%>
              <%= attr.name %>: item!.<%= attr.name %>?.format("LTS") ?? undefined,
            <% } -%>
          <% }) -%>
        }
      <% } -%>
      }));

  return (
    <Space direction="vertical" className="table-space <%= tableCssClass %>">
      <Table
        loading={loading}
        dataSource={dataSource}
        columns={columns}
        <% if (multiselect) { -%>
          rowSelection={{
            selectedRowKeys: selectedRowIds,
            onChange: (keys: React.Key[]) => setSelectedRowIds(keys)
          }}
        <% } else { -%>
          rowClassName={record =>
            (record as ItemType)?.<%= idField %> === selectedRowId ? "table-row-selected" : ""
          }
        <% } -%>
        onRow={data => {
          return {
            onClick: () => {
              const id = (data as ItemType)?.<%= idField %>;
              <% if (multiselect) { -%>
                if (selectedRowIds.includes(id!)) {
                  setSelectedRowIds(selectedRowIds.filter((item: string) => item !== id))
                } else {
                  setSelectedRowIds([...selectedRowIds, id]);
                }
              <% } else { -%>
                setSelectedRowId(id === selectedRowId ? null : id);
              <% } -%>
            }
          };
        }}
        scroll={{ x: true }}
        pagination={false}
      />
    </Space>
  );
}

/**
 * Type of data object received when executing the query
 */
type QueryResultType = ResultOf<typeof <%= QUERY_CONST %>>;
<% if (withFilters) { -%>
  /**
  * Type of variables used to filter the items list
  */
  type QueryVariablesType = VariablesOf<typeof <%= QUERY_CONST %>>;
<% } -%>
/**
 * Type of the items list
 */
type ItemTableType =
<% if (locals?.paginationType === 'offset') { -%>
  Exclude<QueryResultType['<%= queryName %>'], null | undefined>['content'];
<% } else {-%>
  QueryResultType['<%= queryName %>'];
<% } -%>
/**
 * Type of a single item
 */
type ItemType = Exclude<ItemTableType, null | undefined>[0];
