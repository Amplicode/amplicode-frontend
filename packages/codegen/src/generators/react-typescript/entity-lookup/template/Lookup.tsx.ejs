<% const QUERY_CONST = toFatSnakeCase(queryName); -%>
<%# ------- TEMPLATE STARTS HERE ------- -%>
import React, { useCallback } from "react";
import { useQuery } from "@apollo/client";
import { ApolloError } from "@apollo/client/errors";
import { ResultOf } from "@graphql-typed-document-node/core";
import { Button, Card, Empty, Space, Spin } from "antd";
import { FormattedMessage, useIntl } from "react-intl";
import { gql } from "@amplicode/gql";
import { CloseOutlined } from "@ant-design/icons";
import { useScreens } from "@amplicode/react-core";
import { ValueWithLabel } from "<%= relDirShift %>core/crud/ValueWithLabel";
import { RequestFailedError } from "<%= relDirShift %>core/crud/RequestFailedError";
import { get<%= capitalizeFirst(entityName) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(entityName) %>DisplayName';
<% attributes.filter(a => a.isRelationField).forEach(attribute => { -%>
  import { get<%= capitalizeFirst(attribute.type) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(attribute.type) %>DisplayName';
<% }) -%>

const <%= QUERY_CONST %> = gql(`
  <%= queryString %>
`);

interface <%= componentName %>Props {
  onSelect?: (entityInstance: Record<string, unknown>) => {};
}

export function <%= componentName %>(props: <%= componentName %>Props) {
  // Load the items from server
  const { loading, error, data } = useQuery(<%= QUERY_CONST %>);
  const items = data?.<%= queryName %>;

  const screens = useScreens();
  const goToParentScreen = useCallback(() => {
    screens.closeActiveBreadcrumb();
  }, [screens]);

  return (
    <div className="narrow-layout">
      <Space direction="vertical" className="card-space">
        <ButtonPanel goToParentScreen={goToParentScreen} />
        <Cards
          items={items}
          loading={loading}
          error={error}
          onSelect={item => {
            props.onSelect != null && props.onSelect(item);
            goToParentScreen();
          }}
        />
        {/* <Pagination /> - in future */}
      </Space>
    </div>
  );
}

interface ButtonPanelProps {
  goToParentScreen: () => void;
}

/**
 * Button panel above
 */
function ButtonPanel(props: ButtonPanelProps) {
  const intl = useIntl();

  return (
    <div>
      <Button
        htmlType="button"
        key="close"
        title={intl.formatMessage({ id: "common.close" })}
        icon={<CloseOutlined />}
        onClick={props.goToParentScreen}
      >
        <span>
          <FormattedMessage id="common.close" />
        </span>
      </Button>
    </div>
  );
}

interface ItemCardsProps {
  items?: ItemListType;
  loading?: boolean;
  error?: ApolloError;
  onSelect: (entityInstance: Record<string, unknown>) => void;
}

/**
 * Collection of cards, each card representing an item
 */
function Cards({ items, loading, error, onSelect }: ItemCardsProps) {
  if (loading) {
    return <Spin />;
  }

  if (error) {
    return <RequestFailedError />;
  }

  if (items == null || items.length === 0) {
    return <Empty />;
  }

  return (
    <Space direction="vertical" className="lookup-cards card-space">
      {items.map(item => (
        <ItemCard item={item} key={item?.id} onSelect={onSelect} />
      ))}
    </Space>
  );
}

interface ItemCardProps {
  item: ItemType;
  onSelect: (entityInstance: Record<string, unknown>) => void;
}

function ItemCard({ item, onSelect }: ItemCardProps) {
  if (item == null) {
    return null;
  }

  return (
    <Card key={item.id}
          title={get<%= capitalizeFirst(entityName) %>DisplayName(item)}
          className="narrow-layout"
          onClick={() => onSelect(item)}
    >
      <% attributes.forEach(attr => { -%>
        <% if (!attr.isRelationField) { -%>
          <ValueWithLabel
            key='<%= attr.name %>'
            label='<%= attr.displayName %>'
            value={item.<%= attr.name %> ?? undefined}
          />
        <% } -%>
        <% if (attr.isRelationField) { -%>
          <ValueWithLabel
            key='<%= attr.name %>'
            label='<%= attr.displayName %>'
            value={get<%= capitalizeFirst(attr.type) %>DisplayName(item.<%= attr.name %> ?? undefined)}
          />
        <% } -%>
      <% }) -%>
    </Card>
  );
}

/**
 * Type of data object received when executing the query
 */
type QueryResultType = ResultOf<typeof <%= QUERY_CONST %>>;
/**
 * Type of the items list
 */
type ItemListType = QueryResultType['<%= queryName %>'];
/**
 * Type of a single item
 */
type ItemType = Exclude<ItemListType, null | undefined>[0];
