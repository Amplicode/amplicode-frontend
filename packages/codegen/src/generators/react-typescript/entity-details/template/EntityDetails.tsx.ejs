import {Card, Spin, Empty, Descriptions, Button} from 'antd';
import {gql} from "<%= relDirShift %>gql";
import {useQuery} from '@apollo/client';
import {FormattedMessage, useIntl} from 'react-intl';
import {useNavigate, useParams} from "react-router-dom";
import { get<%= capitalizeFirst(entityName) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(entityName) %>DisplayName';
<% attributes.filter(attr => attr.isSingleRelationField || attr.isMultiRelationField).forEach(attribute => { -%>
  import { get<%= capitalizeFirst(attribute.type) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(attribute.type) %>DisplayName';
<% }) -%>
import {RequestFailedError} from "../../../core/crud/RequestFailedError";
import {deserialize} from "<%= relDirShift %>core/transform/model/deserialize";
import {useBreadcrumbItem} from "<%= relDirShift %>core/screen/useBreadcrumbItem";

const <%= toFatSnakeCase(queryName) %> = gql(`
  <%= queryString %>
`);

export function <%= componentName %>() {
  const intl = useIntl();
  useBreadcrumbItem(intl.formatMessage({id: 'screen.<%= componentName %>'}));

  const {recordId} = useParams();
  const navigate = useNavigate();

  const {loading: queryLoading, error: queryError, data} = useQuery(<%= toFatSnakeCase(queryName) %>, {
    variables: {
      id: recordId
    }
  });

  const item = deserialize(data?.<%= queryName %>);

  if (queryLoading) {
    return <Spin/>;
  }

  if (queryError) {
    return <RequestFailedError />;
  }

  if (item == null) {
    return <Empty/>;
  }

  return (
    <Card className="narrow-layout">
      <Descriptions layout="horizontal"
                    title={get<%= capitalizeFirst(entityName) %>DisplayName(item)}
                    column={1}
      >
        <% attributes.forEach(attr => { -%>
          <Descriptions.Item
            label={<strong><%= attr.displayName %></strong>}
          >
            <% if (attr.isSingleRelationField) { -%>
              {get<%= capitalizeFirst(attr.type) %>DisplayName(item.<%= attr.name %> ?? undefined)}
            <% } else if (attr.isMultiRelationField) { -%>
              {item.<%= attr.name %> &&
               item.<%= attr.name %>
                 .map(entry => get<%= capitalizeFirst(attr.type) %>DisplayName(entry))
                 .filter(entry => entry !== "")
                 .join(", ")}
            <% } else if (attr.type === 'Date') { -%>
              {item.<%= attr.name %>?.format("LL") ?? undefined}
            <% } else if (attr.type === 'LocalDateTime' || attr.type === 'DateTime' || attr.type === 'Timestamp') { -%>
              {item.<%= attr.name %>?.format("LLL") ?? undefined}
            <% } else if (attr.type === 'LocalTime' || attr.type === 'Time') { -%>
              {item.<%= attr.name %>?.format("LTS") ?? undefined}
            <% } else if (attr.type === 'Url') { -%>
              {item.<%= attr.name %> && (
                <a target="_blank" rel="noreferrer" href={item.<%= attr.name %>}>
                  {item.<%= attr.name %>}
                </a>
              )}
            <% } else { -%>
              {item.<%= attr.name %> ?? undefined}
            <% } -%>
          </Descriptions.Item>
        <% }) -%>
      </Descriptions>
      <Button htmlType="button"
              onClick={() => navigate("..")}
      >
        <FormattedMessage id="common.close" />
      </Button>
    </Card>
  );
}
