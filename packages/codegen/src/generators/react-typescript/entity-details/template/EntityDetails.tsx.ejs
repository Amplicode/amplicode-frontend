import {useCallback} from 'react';
import {Card, Spin, Empty, Descriptions, Button} from 'antd';
import {gql} from '@amplicode/gql';
import {useQuery} from '@apollo/client';
import {FormattedMessage} from 'react-intl';
import {useHistory} from "react-router-dom";
import {useScreens} from "@amplicode/react-core";
import { get<%= capitalizeFirst(entityName) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(entityName) %>DisplayName';
<% attributes.filter(a => a.isRelationField).forEach(attribute => { -%>
  import { get<%= capitalizeFirst(attribute.type) %>DisplayName } from '<%= relDirShift %>core/display-name/get<%= capitalizeFirst(attribute.type) %>DisplayName';
<% }) -%>
import {RequestFailedError} from "../../../core/crud/RequestFailedError";
import {deserialize} from "../../../core/transform/model/deserialize";

const <%= toFatSnakeCase(queryName) %> = gql(`
  <%= queryString %>
`);

export interface <%= componentName %>Props {
  /**
   * id of entity instance to be loaded when editing an instance.
   * Will be `undefined` when creating an instance.
   */
  id?: string;
}

export function <%= componentName %>({id}: <%= componentName %>Props) {
  const screens = useScreens();
  const history = useHistory();

  const {loading: queryLoading, error: queryError, data} = useQuery(<%= toFatSnakeCase(queryName) %>, {
    variables: {
      id
    }
  });

  const item = deserialize(data?.<%= queryName %>);

  const goToParentScreen = useCallback(() => {
    history.push('.'); // Remove entity id part from url
    screens.closeActiveBreadcrumb();
  }, [screens, history]);

  if (queryLoading) {
    return <Spin/>;
  }

  if (queryError) {
    return <RequestFailedError />;
  }

  if (item == null) {
    return <Empty/>;
  }

  return (
    <Card className="narrow-layout">
      <Descriptions layout="horizontal"
                    title={get<%= capitalizeFirst(entityName) %>DisplayName(item)}
                    column={1}
      >
        <% attributes.forEach(attr => { -%>
          <Descriptions.Item
            label={<strong><%= attr.displayName %></strong>}
          >
            <% if (attr.isRelationField) { -%>
              {get<%= capitalizeFirst(attr.type) %>DisplayName(item.<%= attr.name %> ?? undefined)}
            <% } else if (attr.type === 'Date') { -%>
              {item.<%= attr.name %>?.format('LL') ?? undefined}
            <% } else { -%>
              {item.<%= attr.name %> ?? undefined}
            <% } -%>
          </Descriptions.Item>
        <% }) -%>
      </Descriptions>
      <Button htmlType="button"
              onClick={goToParentScreen}
      >
        <FormattedMessage id="common.close" />
      </Button>
    </Card>
  );
}
