<Form.Item
  name=<%- include(includesPath('RenderReactPropValue'), {data: attr.name}) %>
  label='<%= attr.displayName %>'
  <% if (attr?.type === 'Boolean') { -%>
    valuePropName='checked'
    initialValue={false}
  <% } -%>
>
  <% if (attr.type === 'Int') { -%>
    <InputNumber
      type="number"
      precision={0}
      max={2147483647}
      min={-2147483648}
      <% if (locals.index === 0) { -%> autoFocus <% } -%>
    />
  <% } else if (attr.type === 'Float') { -%>
    <InputNumber
      type="number"
      <% if (locals.index === 0) { -%> autoFocus <% } -%>
    />
  <% } else if (attr.type === 'BigInteger') { %>
    <InputNumber
      type="number"
      precision={0}
      stringMode
      <% if (locals.index === 0) { -%> autoFocus <% } -%>
    />
  <% } else if (attr.type === 'Long') { %>
    <InputNumber
      type="number"
      precision={0}
      stringMode
      <% if (locals.index === 0) { -%> autoFocus <% } -%>
    />
  <% } else if (attr.type === 'BigDecimal') { %>
    <InputNumber
      type="number"
      stringMode
      <% if (locals.index === 0) { -%> autoFocus <% } -%>
    />
  <% } else if (attr.type === 'String') { -%>
    <Input
      <% if (locals.index === 0) { -%> autoFocus <% } -%>
      <% if (locals.withReset) { -%>
        suffix={
          form.isFieldTouched(<%- include(includesPath('RenderValue'), {data: attr.name}) %>)
            ? <CloseCircleOutlined onClick={() => form.resetFields([<%- include(includesPath('RenderValue'), {data: attr.name}) %>])} />
            : <span />
        }
      <% } -%>
    />
  <% } else if (attr.type === 'Url') { -%>
    <Input
      type="url"
      <% if (locals.index === 0) { -%> autoFocus <% } -%>
      <% if (locals.withReset) { -%>
        suffix={
          form.isFieldTouched(<%- include(includesPath('RenderValue'), {data: attr.name}) %>)
            ? <CloseCircleOutlined onClick={() => form.resetFields([<%- include(includesPath('RenderValue'), {data: attr.name}) %>])} />
            : <span />
        }
      <% } -%>
    />
  <% } else if (attr.type === 'Boolean') { -%>
    <Checkbox <% if (locals.index === 0) { -%> autoFocus <% } -%> />
  <% } else if (attr.type === 'ID') { -%>
  <% } else if (attr.enumOptions != null) { -%>
    <Select <% if (locals.index === 0) { -%> autoFocus <% } -%> >
      <% attr.enumOptions.forEach(opt => { -%>
        <Select.Option value="<%= opt.value %>"><%= fatSnakeToNormal(opt.name) %></Select.Option>
      <% }) -%>
    </Select>
  <% } else if (attr.type === 'Date') { %>
    <DatePicker <% if (locals.index === 0) { -%> autoFocus <% } -%> />
  <% } else if (attr.type === 'LocalDateTime' || attr.type === 'DateTime' || attr.type === 'Timestamp') { %>
    <DatePicker  showTime={{ format: "HH:mm:ss" }} <% if (index === 0) { -%> autoFocus <% } -%> />
  <% } else if (attr.type === 'LocalTime' || attr.type === 'Time') { %>
    <TimePicker <% if (locals.index === 0) { -%> autoFocus <% } -%> />
  <% } else if (attr.isRelationField) { %>
    <EntityLookupField getDisplayName={get<%= capitalizeFirst(attr.type) %>DisplayName}
                        label="<%= attr.displayName %>"
                        <% if (locals.index === 0) { -%>
                          autoFocus
                        <% } -%>
                        // TODO Uncomment the code and specify the list component
                        // lookupComponent={<YourEntityLookupComponentName/>}
    />
  <% } else { -%>
    <Input <% if (locals.index === 0) { -%> autoFocus <% } -%> />
  <% } -%>
</Form.Item>
