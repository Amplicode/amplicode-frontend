import * as React from "react";
import {observer} from "mobx-react";
import {Link} from "react-router-dom";
import { computed } from 'mobx';

import {Modal, Button, List, Icon} from "antd";

import {collection, injectMainStore, MainStoreInjected} from "@cuba-platform/react-core";
import {EntityProperty, Spinner} from "@cuba-platform/react-ui";

import {<%= entity.className %>} from "<%= relDirShift %><%= entity.path %>";
import {SerializedEntity} from "@cuba-platform/rest";
import {<%= className %>} from "./<%= className %>";
import {FormattedMessage, injectIntl, WrappedComponentProps} from 'react-intl';

@injectMainStore
@observer
class <%= listComponentName %>Component extends React.Component<MainStoreInjected & WrappedComponentProps> {

  dataCollection = collection<<%= entity.className %>>(<%= entity.className %>.NAME, {view: '<%= listView.name %>', sort: '-updateTs'});

  fields = [
  <% listAttributes.forEach(p => { %>
    '<%= p.name %>',
  <% }) %>
  ];

  showDeletionDialog = (e: SerializedEntity<<%= entity.className %>>) => {
    Modal.confirm({
      title: this.props.intl.formatMessage(
        {id: 'management.browser.delete.areYouSure'},
        {instanceName: e._instanceName}
      ),
      okText: this.props.intl.formatMessage({id: 'management.browser.delete.ok'}),
      cancelText: this.props.intl.formatMessage({id:'management.browser.delete.cancel'}),
      onOk: () => {
        return this.dataCollection.delete(e);
      }
    });
  };

  @computed private get dataLoaded() {
    const { mainStore } = this.props;
    return mainStore && !!mainStore.messages && !!mainStore.metadata && !!mainStore.enums && mainStore.security.dataLoaded;
  }

  render() {

    const {status, items} = this.dataCollection;
    if (status === "LOADING" || !this.dataLoaded) { return <Spinner/> };

    return (
      <div className='narrow-layout'>
        <div style={{marginBottom: '12px'}}>
          <Link to={<%= className %>.PATH + '/' + <%= className %>.NEW_SUBPATH}>
            <Button htmlType='button'
                    type='primary'
                    icon='plus'>
              <span><FormattedMessage id='management.browser.create'/></span>
            </Button>
          </Link>
        </div>

        <List itemLayout="horizontal"
              bordered
              dataSource={items}
              renderItem={item =>
                <List.Item actions={[
                    <Icon type='delete'
                          key='delete'
                          onClick={() => this.showDeletionDialog(item)}/>,
                    <Link to={<%= className %>.PATH + '/' + item.id} key='edit'>
                      <Icon type='edit'/>
                    </Link>
                ]}>
                  <div style={{flexGrow: 1}}>
                  {this.fields.map(p =>
                    <EntityProperty entityName={<%= entity.className %>.NAME}
                                    propertyName={p}
                                    value={item[p]}
                                    key={p}/>
                  )}
                  </div>
                </List.Item>
            }/>
      </div>);
  }
}

const <%=listComponentName%> = injectIntl(<%=listComponentName%>Component);

export default <%=listComponentName%>;
