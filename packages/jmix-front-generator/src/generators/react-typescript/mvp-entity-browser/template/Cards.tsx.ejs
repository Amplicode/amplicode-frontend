import {observer} from "mobx-react";
import {gql, useQuery, useMutation, ApolloCache, Reference} from '@apollo/client';
import {registerEntityList, useParentScreen} from "@haulmont/jmix-react-ui";
import {useScreens} from "@haulmont/jmix-react-core";
import {
  CheckOutlined,
  CloseOutlined,
  DeleteOutlined,
  EditOutlined,
  PlusOutlined,
  SelectOutlined
} from '@ant-design/icons';
import {Button, Card, Tooltip, List, Modal, Spin, Empty, Result} from "antd";
import {FormattedMessage, IntlShape, useIntl} from "react-intl";
import {FetchResult} from "@apollo/client/link/core";
import {MutationFunctionOptions} from "@apollo/client/react/types/types";
import {FetchResult} from "@apollo/client/link/core";
import {MutationFunctionOptions} from "@apollo/client/react/types/types";
import {EntityListScreenProps} from "<%= relDirShift %>framework/components/entity-list-screen/EntityListScreenProps";
import {openBreadcrumb} from "<%= relDirShift %>framework/screen-api/openBreadcrumb";
import {guessDisplayName} from "<%= relDirShift %>framework/util/guessDisplayName";

const ENTITY_NAME = '<%= entityName %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const <%= toFatSnakeCase(queryName) %> = gql`
  <%= queryString %>
`;

<% if (deleteMutationName != null) { -%>
const <%= toFatSnakeCase(deleteMutationName) %> = gql`
  <%= deleteMutationString %>
`;
<% } -%>

const <%= className %> = observer(({onSelect}: EntityListScreenProps) => {

  const screens = useScreens();
  const intl = useIntl();
  const goToParentScreen = useParentScreen(ROUTING_PATH);

  const {loading, error, data} = useQuery(<%= toFatSnakeCase(queryName) %>);

  <% if (deleteMutationName != null) { -%>
    const [executeDeleteMutation] = useMutation(<%= toFatSnakeCase(deleteMutationName) %>);
  <% } -%>

  // Entity list can work in select mode, which means that you can select an entity instance and it will be passed to onSelect callback.
  // This functionality is used in EntityLookupField.
  const isSelectMode = (onSelect != null);

  if (loading) {
    return <Spin/>;
  }

  if (error) {
    return <Result status="error"
                   title={<FormattedMessage id='common.requestFailed' />}
    />;
  }

  const items = data?.['<%= queryName %>'];

  if (items == null || items.length === 0) {
    return <Empty />;
  }

  return (
    <div className="narrow-layout">
      <div style={{marginBottom: '12px'}}>
        {!isSelectMode && (
          <Button htmlType='button'
                  key='create'
                  title='intl.formatMessage({id: "common.create"})'
                  type='primary'
                  icon={<PlusOutlined />}
                  onClick={() => {
                    openEntityEditorScreen({
                      screens,
                      entityName: ENTITY_NAME,
                      intl,
                    });
                    window.scrollTo(0, 0);
                  }}
          >
            <span><FormattedMessage id='common.create'/></span>
          </Button>
        )}
        {isSelectMode && (
          <Button
                  htmlType="button"
                  key='close'
                  title='intl.formatMessage({id: "common.close"})'
                  type="primary"
                  icon={<CloseOutlined />}
                  onClick={goToParentScreen}
          >
            <span><FormattedMessage id='common.close' /></span>
          </Button>
        )}
      </div>

      <%# TODO: entity instance typing %>
      {items.map((e: any) =>
        <Card key={e['<%= idField %>']}
              title={guessDisplayName(e)}
              style={{marginBottom: '12px'}}
              actions={getCardActions({
                isSelectMode,
                <% if (executeDeleteMutation != null) { -%>
                  executeDeleteMutation,
                <% } -%>
                intl,
                entityInstance: e,
                screens,
                onSelect,
                goToParentScreen
              })}
        >
          <Fields entity={e} />
        </Card>
      )}
    </div>
  );
});

interface FieldsProps {
  entity: any;
};

const Fields = (props: FieldsProps) => {
  const {entity} = props;
  return (
    <>
      {Object.keys(entity)
        .filter(p => p !== '<%= idField %>' && entity[p] != null)
        .map(p => <div><strong>{renderLabel(p)}:</strong> {renderFieldValue(entity, p)}</div>)
      }
    </>
  );
};

function renderFieldValue(entity: any, property: string): string {
  return typeof entity[property] === 'object'
    ? JSON.stringify(entity[property])
    : entity[property].toString();
}

function renderLabel(property: string): string {
  const split = property.replace(/([^A-Z])([A-Z])/g, '$1 $2');
  return split[0].toUpperCase() + split.slice(1);
}

interface CardActionsInput {
  isSelectMode: boolean,
  <% if (executeDeleteMutation != null) { -%>
    executeDeleteMutation: ((options?: MutationFunctionOptions) => Promise<FetchResult>),
  <% } -%>
  intl: IntlShape,
  entityInstance: any,
  screens: Screens,
  onSelect?: (entityInstance: this['entityInstance']) => void,
  goToParentScreen?: () => void;
}

function getCardActions({
  isSelectMode,
  <% if (executeDeleteMutation != null) { -%>
    executeDeleteMutation,
  <% } -%>
  intl,
  entityInstance,
  screens,
  onSelect,
  goToParentScreen
}: CardActionsInput) {
  if (!isSelectMode) {
    return [
      <% if (executeDeleteMutation != null) { -%>
        <DeleteOutlined
              key="delete"
              title={intl.formatMessage({id: "common.remove"})}
              onClick={() => {
                Modal.confirm({
                  content: intl.formatMessage({id: "EntityListScreen.deleteConfirmation"}),
                  okText: intl.formatMessage({id: "common.ok"}),
                  cancelText: intl.formatMessage({ id: "common.cancel" }),
                  onOk: () => {
                    executeDeleteMutation({
                      variables: {
                        id: entityInstance.id
                      },
                      update: getUpdateFn(entityInstance)
                    });
                  }
                });
              }}
        />,
      <% } -%>
      <EditOutlined
            key="edit"
            title={intl.formatMessage({id: "common.edit"})}
            onClick={() => {
              // TODO Uncomment the code, specify the editor component and remove the alert
              notifications.warning('Please specify the editor component');
              // openBreadcrumb({
              //   component: EntityDetailsComponent,
              //   props: {
              //     id: entityInstance.id
              //   },
              //   title: 'Entity Details Component Title',
              //   screens,
              // });
            }}
      />
    ];
  }

  if (isSelectMode) {
    return [
      <CheckOutlined
          key='select'
          title={intl.formatMessage({id: "EntityLookupField.selectEntityInstance"})}
          onClick={() => {
            if (onSelect != null && goToParentScreen != null) {
              onSelect(entityInstance);
              goToParentScreen();
              window.scrollTo(0, 0);
            }
          }}
      />
    ];
  }
}

function getUpdateFn(e: any) {
  return (cache: ApolloCache<any>) => {
    cache.modify({
      fields: {
        ['<%= queryName %>'](existingRefs, { readField }) {
          return existingRefs.filter(
            (ref: Reference) => e['<%= idField %>'] !== readField("<%= idField %>", ref)
          );
        }
      }
    });
  }
}

registerEntityList({
  component: <%= className %>,
  caption: 'screen.<%= className %>',
  screenId: '<%= className %>',
  entityName: ENTITY_NAME,
  menuOptions: {
    pathPattern: `${ROUTING_PATH}/:entityId?`,
    menuLink: ROUTING_PATH
  }
});

export default <%= className %>;
