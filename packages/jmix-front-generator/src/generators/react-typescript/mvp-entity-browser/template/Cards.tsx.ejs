import {observer} from "mobx-react";
import {gql, useQuery, useMutation, ApolloCache, Reference} from '@apollo/client';
import {registerEntityList, useParentScreen} from "@haulmont/jmix-react-ui";
import {useScreens, Screens} from "@haulmont/jmix-react-core";
import {
  CheckOutlined,
  CloseOutlined,
  DeleteOutlined,
  EditOutlined,
  PlusOutlined,
} from '@ant-design/icons';
import {
  Button,
  Card,
  Modal,
  Spin,
  Empty,
  Result,
} from "antd";
import {FormattedMessage, IntlShape, useIntl} from "react-intl";
import {MutationFunctionOptions} from "@apollo/client/react/types/types";
import {FetchResult} from "@apollo/client/link/core";
import {EntityListScreenProps} from "<%= relDirShift %>framework/components/entity-list-screen/EntityListScreenProps";
import {openBreadcrumb} from "<%= relDirShift %>framework/screen-api/openBreadcrumb";
import {guessDisplayName} from "<%= relDirShift %>framework/util/guessDisplayName";

const ENTITY_NAME = '<%= entityName %>';
const ROUTING_PATH = '/<%= nameLiteral %>';

const <%= toFatSnakeCase(queryName) %> = gql`
  <%= queryString %>
`;

<% if (locals.deleteMutationString != null && locals.deleteMutationName != null) { -%>
const <%= toFatSnakeCase(deleteMutationName) %> = gql`
  <%= deleteMutationString %>
`;
<% } -%>

const <%= className %> = observer(({onSelect}: EntityListScreenProps) => {

  const screens: Screens = useScreens();
  const intl = useIntl();
  const goToParentScreen = useParentScreen(ROUTING_PATH);

  const {loading, error, data} = useQuery(<%= toFatSnakeCase(queryName) %>);

  <% if (locals.deleteMutationString != null && locals.deleteMutationName != null) { -%>
    const [executeDeleteMutation] = useMutation(<%= toFatSnakeCase(deleteMutationName) %>);
  <% } -%>

  // Entity list can work in select mode, which means that you can select an entity instance and it will be passed to onSelect callback.
  // This functionality is used in EntityLookupField.
  const isSelectMode = (onSelect != null);

  if (loading) {
    return <Spin/>;
  }

  if (error) {
    return <Result status="error"
                   title={<FormattedMessage id='common.requestFailed' />}
    />;
  }

  const items = data?.['<%= queryName %>'];

  if (items == null || items.length === 0) {
    return <Empty />;
  }

  return (
    <div className="narrow-layout">
      <% if (mode === 'edit') { -%>
        {!isSelectMode && (
          <div style={{marginBottom: '12px'}}>
            <Button htmlType='button'
                    key='create'
                    title='intl.formatMessage({id: "common.create"})'
                    type='primary'
                    icon={<PlusOutlined />}
                    onClick={() => {
                      // TODO Uncomment the code, specify the editor component and remove the alert
                      alert('Please specify the editor component');
                      // openBreadcrumb({
                      //   component: EntityEditorComponent,
                      //   title: 'Entity Editor Component Title',
                      //   screens,
                      // });
                    }}
            >
              <span><FormattedMessage id='common.create'/></span>
            </Button>
          </div>
        )}
      <% } -%>
      {isSelectMode && (
        <div style={{marginBottom: '12px'}}>
          <Button
                  htmlType="button"
                  key='close'
                  title='intl.formatMessage({id: "common.close"})'
                  type="primary"
                  icon={<CloseOutlined />}
                  onClick={goToParentScreen}
          >
            <span><FormattedMessage id='common.close' /></span>
          </Button>
        </div>
      )}

      {items.map((e: any) =>
        <Card key={e['<%= idField %>']}
              title={guessDisplayName(e)}
              style={{marginBottom: '12px'}}
              actions={getCardActions({
                        entityInstance: e,
                        onSelect,
                        <% if (locals.deleteMutationString != null && locals.deleteMutationName != null) { -%>
                          executeDeleteMutation,
                        <% } -%>
                        <% if (mode === 'edit' || mode === 'viewWithDetails') { -%>
                          screens,
                        <% } -%>
                        intl,
                        goToParentScreen,
                       })}
        >
          <Fields entity={e} />
        </Card>
      )}
    </div>
  );
});

const Fields = ({entity}: {entity: any}) => (
  <>
    {Object.keys(entity)
      .filter(p => p !== '<%= idField %>' && entity[p] != null)
      .map(p => <div><strong>{renderLabel(p)}:</strong> {renderFieldValue(entity, p)}</div>)
    }
  </>
);

function renderFieldValue(entity: any, property: string): string {
  return typeof entity[property] === 'object'
    ? JSON.stringify(entity[property])
    : entity[property].toString();
}

function renderLabel(property: string): string {
  const split = property.replace(/([^A-Z])([A-Z])/g, '$1 $2');
  return split[0].toUpperCase() + split.slice(1);
}

interface CardActionsInput {
  entityInstance: any;
  onSelect?: (entityInstance: this['entityInstance']) => void;
  <% if (locals.deleteMutationString != null && locals.deleteMutationName != null) { -%>
    executeDeleteMutation: ((options?: MutationFunctionOptions) => Promise<FetchResult>);
  <% } -%>
  <% if (mode === 'edit' || mode === 'viewWithDetails') { -%>
    screens: Screens;
  <% } -%>
  intl: IntlShape;
  goToParentScreen: () => void;
}
  
function getCardActions(input: CardActionsInput) {
  const {
    entityInstance,
    onSelect,
    <% if (locals.deleteMutationString != null && locals.deleteMutationName != null) { -%>
      executeDeleteMutation,
    <% } -%>
    <% if (mode === 'edit' || mode === 'viewWithDetails') { -%>
      screens,
    <% } -%>
    intl,
    goToParentScreen,
  } = input;

  <% if ((locals.deleteMutationString != null && locals.deleteMutationName != null) || mode === 'edit') { %>
    if (onSelect == null) {
      return [
        <% if (locals.deleteMutationString != null && locals.deleteMutationName != null) { -%>
          <DeleteOutlined
                key="delete"
                title={intl.formatMessage({id: "common.remove"})}
                onClick={() => {
                  Modal.confirm({
                    content: intl.formatMessage({id: "EntityListScreen.deleteConfirmation"}),
                    okText: intl.formatMessage({id: "common.ok"}),
                    cancelText: intl.formatMessage({ id: "common.cancel" }),
                    onOk: () => {
                      executeDeleteMutation({
                        variables: {
                          id: entityInstance.id
                        },
                        update: getUpdateFn(entityInstance)
                      });
                    }
                  });
                }}
          />,
        <% } -%>
        <% if (mode === 'edit') { -%>
          <EditOutlined
                key="edit"
                title={intl.formatMessage({id: "common.edit"})}
                onClick={() => {
                  // TODO Uncomment the code, specify the editor component and remove the alert
                  alert('Please specify the editor component');
                  // openBreadcrumb({
                  //   component: EntityEditorComponent,
                  //   props: {
                  //     id: entityInstance.id
                  //   },
                  //   title: 'Entity Editor Component Title',
                  //   screens,
                  // });
                }}
          />
        <% } -%>
      ];
    }
  <% } else { -%>
    if (onSelect == null) {
      return [];
    }
  <% } -%>

  if (onSelect != null) {
    return [
      <CheckOutlined
          key='select'
          title={intl.formatMessage({id: "EntityLookupField.selectEntityInstance"})}
          onClick={() => {
            if (onSelect != null && goToParentScreen != null) {
              onSelect(entityInstance);
              goToParentScreen();
              window.scrollTo(0, 0);
            }
          }}
      />
    ];
  }
}

function getUpdateFn(e: any) {
  return (cache: ApolloCache<any>) => {
    cache.modify({
      fields: {
        ['<%= queryName %>'](existingRefs, { readField }) {
          return existingRefs.filter(
            (ref: Reference) => e['<%= idField %>'] !== readField("<%= idField %>", ref)
          );
        }
      }
    });
  }
}

registerEntityList({
  component: <%= className %>,
  caption: 'screen.<%= className %>',
  screenId: '<%= className %>',
  entityName: ENTITY_NAME,
  menuOptions: {
    pathPattern: `${ROUTING_PATH}/:entityId?`,
    menuLink: ROUTING_PATH
  }
});

export default <%= className %>;
